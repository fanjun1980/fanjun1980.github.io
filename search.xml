<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[分布式事务之二阶段提交、三阶段提交]]></title>
      <url>http://yoursite.com/2016/08/18/2PC_3PC/</url>
      <content type="html"><![CDATA[<h2 id="分布式事务及其实现机制"><a href="#分布式事务及其实现机制" class="headerlink" title="分布式事务及其实现机制"></a>分布式事务及其实现机制</h2><blockquote>
<p>分布式事务是指会涉及到操作多个数据库（或者提供事务语义的系统，如JMS）的事务。其实就是将对同一数据库事务的概念扩大到了对多个数据库的事务。目的是为了保证分布式系统中事务操作的原子性。分布式事务处理的关键是必须有一种方法可以知道事务在任何地方所做的所有动作，提交或回滚事务的决定必须产生统一的结果（全部提交或全部回滚）。</p>
</blockquote>
<p>与本地事务类似，分布式事务也包含原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）。<br>分布式事务的实现技术如下表所示(以DBMS作为事务参与方为例)</p>
<table>
<thead>
<tr>
<th>分布式ACID</th>
<th>实现技术</th>
</tr>
</thead>
<tbody>
<tr>
<td>原子性（Atomicity）</td>
<td>MVCC + 两阶段提交</td>
</tr>
<tr>
<td>一致性（Consistency）</td>
<td>约束（主键、外键等）</td>
</tr>
<tr>
<td>隔离性</td>
<td>MVCC</td>
</tr>
<tr>
<td>持久性</td>
<td>WAL</td>
</tr>
</tbody>
</table>
<p>从上表可以看到，一致性、隔离性和持久性靠的是各分布式事务参与方自己原有的机制，<strong>两阶段提交主要用来保证分布式事务的原子性</strong>。</p>
<h2 id="2PC（二阶段提交）"><a href="#2PC（二阶段提交）" class="headerlink" title="2PC（二阶段提交）"></a>2PC（二阶段提交）</h2><p><img src="http://ocf6s1zuq.bkt.clouddn.com/2PC_3PC/2PC.png" alt="2PC流程"></p>
<p>在两阶段提交协议中，包含了两种角色：</p>
<ul>
<li>协调者：协调者就是处理分布式事务的节点</li>
<li>参与者：事务管理器,实际处理事务的节点</li>
</ul>
<p>该算法分为两个阶段：</p>
<h3 id="准备阶段-投票阶段"><a href="#准备阶段-投票阶段" class="headerlink" title="准备阶段(投票阶段)"></a>准备阶段(投票阶段)</h3><blockquote>
<p>1）协调者向所有的参与者发送事务内容，询问是否可以执行事务提交操作，并开始等待各参与者的响应<br>2）各参与者节点执行事务操作，并将Undo和Redo信息计入事务日志中<br>3）如果参与者成功执行了事务操作，那么就反馈给协调者<code>Yes</code>响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者<code>No</code>响应，表示事务不可以执行。</p>
</blockquote>
<h3 id="提交阶段（执行阶段）"><a href="#提交阶段（执行阶段）" class="headerlink" title="提交阶段（执行阶段）"></a>提交阶段（执行阶段）</h3><p>接下来分两种情况分别讨论提交阶段的过程</p>
<pre><code>a.当协调者节点从所有参与者节点获得的相应消息都为`YES`时：
</code></pre><blockquote>
<p>1）协调者节点向所有参与者节点发出<code>commit</code>的请求<br>2）参与者节点正式完成操作，并释放在整个事务期间内占用的资源<br>3）参与者节点向协调者节点发送<code>完成</code>消息<br>4）协调者节点受到所有参与者节点反馈的<code>完成</code>消息后，完成事务</p>
</blockquote>
<pre><code>b.如果任一参与者节点在第一阶段返回的响应消息为`NO`，或者 协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：
</code></pre><blockquote>
<p>1）协调者节点向所有参与者节点发出<code>rollback</code>的请求<br>2）参与者节点利用之前写入的Undo信息执行回滚，并释放在整个事务期间内占用的资源<br>3）参与者节点向协调者节点发送<code>回滚完成</code>消息<br>4）协调者节点受到所有参与者节点反馈的<code>回滚完成</code>消息后，取消事务</p>
</blockquote>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点</strong>：原理简单、实现方便<br><strong>缺点</strong>：同步阻塞、单点问题、数据不一致</p>
<ol>
<li><strong>同步阻塞问题</strong>。执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态。</li>
<li><strong>单点故障</strong>。由于协调者的重要性，一旦协调者发生故障。参与者会一直阻塞下去。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。</li>
<li><strong>数据不一致</strong>。在二阶段提交的阶段二中，当协调者向参与者发送commit请求之后，发生了局部网络异常或者在发送commit请求过程中协调者发生了故障，这会导致只有一部分参与者接受到了commit请求。而在这部分参与者接到commit请求之后就会执行commit操作,但是其他部分未接到commit请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据部一致性的现象。</li>
</ol>
<p>由于二阶段提交存在着诸如同步阻塞、单点问题、脑裂等缺陷，所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。</p>
<h2 id="3PC（三阶段提交）"><a href="#3PC（三阶段提交）" class="headerlink" title="3PC（三阶段提交）"></a>3PC（三阶段提交）</h2><p>三阶段提交（是二阶段提交（2PC）的改进版本。与两阶段提交不同的是，三阶段提交有两个改动点：</p>
<ol>
<li>引入超时机制。同时在协调者和参与者中都引入超时机制。</li>
<li>在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。</li>
</ol>
<p>也就是说，除了引入超时机制之外，3PC把2PC的准备阶段再次一分为二，这样三阶段提交就有CanCommit、PreCommit、DoCommit三个阶段。<br><img src="http://ocf6s1zuq.bkt.clouddn.com/2PC_3PC/3PC.png" alt="3PC流程"></p>
<h3 id="CanCommit"><a href="#CanCommit" class="headerlink" title="CanCommit"></a>CanCommit</h3><blockquote>
<p>1）协调者向各参与者发送<code>CanCommit</code>的请求，询问是否可以执行事务提交操作，并开始等待各参与者的响应<br>2）参与者收到<code>CanCommit</code>请求后，正常情况下，如果自身认为可以顺利执行事务，那么会反馈<code>Yes</code>响应，并进入预备状态，否则反馈<code>No</code></p>
</blockquote>
<h3 id="PreCommit"><a href="#PreCommit" class="headerlink" title="PreCommit"></a>PreCommit</h3><pre><code>a.如果协调者接收到各参与者反馈都是Yes，那么执行事务预提交
</code></pre><blockquote>
<p>1）协调者向各参与者发送<code>preCommit</code>请求，并进入<code>prepared</code>阶段<br>2）参与者接收到<code>preCommit</code>请求后，会执行事务操作，并将Undo和Redo信息记录到事务日记中<br>3）如果各参与者都成功执行了事务操作，那么反馈给协调者<code>Ack</code>响应，同时等待最终指令，提交<code>commit</code>或者终止<code>abort</code></p>
</blockquote>
<pre><code>b.如果任何一个参与者向协调者反馈了No响应，或者在等待超时后，协调者无法接收到所有参与者的反馈，那么就会中断事务。
</code></pre><blockquote>
<p>1）协调者向所有参与者发送<code>abort</code>请求<br>2）无论是收到来自协调者的<code>abort</code>请求，还是等待超时，参与者都中断事务</p>
</blockquote>
<h3 id="doCommit"><a href="#doCommit" class="headerlink" title="doCommit"></a>doCommit</h3><pre><code>a.假设协调者正常工作，接收到了所有参与者的ack响应，那么它将从预提交阶段进入提交状态
</code></pre><blockquote>
<p>1）协调者向所有参与者发送<code>doCommit</code>请求<br>2）参与者收到<code>doCommit</code>请求后，正式提交事务，并在完成事务提交后释放占用的资源<br>3）参与者完成事务提交后，向协调者发送<code>ACK</code>信息<br>4）协调者接收到所有参与者<code>ack</code>信息，完成事务</p>
</blockquote>
<pre><code>b.假设协调者正常工作，并且有任一参与者反馈No，或者在等待超时后无法接收所有参与者的反馈，都会中断事务
</code></pre><blockquote>
<p>1）协调者向所有参与者节点发送<code>abort</code>请求<br>2）参与者接收到<code>abort</code>请求后，利用undo日志执行事务回滚并在完成事务回滚后释放占用的资源<br>3）参与者在完成事务回滚之后，向协调者发送<code>ack</code>信息<br>4）协调者接收到所有参与者反馈的<code>ack</code>信息后，中断事务</p>
</blockquote>
<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点</strong>：降低参与者阻塞范围，并能够在出现单点故障后继续达成一致<br><strong>缺点</strong>：doCommit阶段，如果出现网络分区，协调者无法与参与者正常通信，参与者依然会进行事务提交，造成数据不一致。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>了解了2PC和3PC之后，我们可以发现虽然它们可以解决分布式事务中的原子性问题；但无论是二阶段提交还是三阶段提交都无法彻底解决分布式中的副本一致性问题。<br>后面的文章，我会介绍分布式一致性协议：Paxos、Raft。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://blog.jobbole.com/95632/" target="_blank" rel="external">关于分布式事务、两阶段提交协议、三阶提交协议</a></li>
<li><a href="http://www.jasongj.com/big_data/two_phase_commit/" target="_blank" rel="external">分布式事务（一）两阶段提交及JTA</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/08/12/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
